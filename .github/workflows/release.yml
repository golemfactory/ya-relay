name: Release
on:
  push:
    tags:
      - v*
      - pre-rel-*

jobs:
  create-release:
    name: "Create Release"
    runs-on: ubuntu-22.04
    steps:
      - name: Create Release
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let tag = context.payload.ref.replace(/.*\//, '');
            let buildNo = context.runNumber;
            let versionName = tag.replace(/^pre-rel-/,'');
            try {
              let release =  await github.request("GET /repos/:owner/:repo/releases/tags/:tag", {
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
            }
            catch(e) {
              let body = ["By installing & running this software you declare that you have read",
                "understood and hereby accept the disclaimer and",
                "privacy warning found at https://handbook.golem.network/see-also/terms"].join("\n");

              let release =  await github.request("POST /repos/:owner/:repo/releases", {
                owner: context.repo.owner,
                repo: context.repo.repo,
                data: {
                  tag_name: tag,
                  prerelease: true,
                  body: body,
                  name: `${versionName} #${buildNo}`
                }
              });
              console.log(release.data.upload_url);
            }
  build:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu
          - windows

    env:
      X86_64_PC_WINDOWS_MSVC_OPENSSL_DIR: c:/vcpkg/installed/x64-windows-static
      OPENSSL_STATIC: 1
    steps:
      - uses: actions/checkout@v1

      - name: Musl
        if: matrix.os == 'ubuntu'
        run: |
          sudo apt-get install -y musl musl-tools cmake

          musl-gcc -v
          cmake --version

      - name: Get upload url
        id: release_upload_url
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            let tag = context.payload.ref.replace(/.*\//, '');
            let release =  await github.request("GET /repos/:owner/:repo/releases/tags/:tag", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            console.log(release.data.upload_url);
            return release.data.upload_url

      - uses: actions-rs/toolchain@v1
        if: matrix.os == 'windows'
        with:
          toolchain: 1.71.1

      - uses: actions-rs/toolchain@v1
        if: matrix.os == 'ubuntu'
        with:
          toolchain: 1.71.1
          target: x86_64-unknown-linux-musl
          override: true

      - name: Build windows
        if: matrix.os == 'windows'
        run: |
          Invoke-WebRequest https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protoc-25.1-win64.zip -o protoc.zip
          Expand-Archive -Path protoc.zip -DestinationPath protoc
          $env:PATH="$env:PATH;$(Get-Location)\protoc\bin;"
          vcpkg install openssl:x64-windows-static
          vcpkg integrate install
          cargo build --bin ya-relay-server -p ya-relay-server --release 

      - name: Build linux
        if: matrix.os == 'ubuntu'
        run: |
          cargo build --release --target x86_64-unknown-linux-musl -p ya-relay-server
  
      - name: Upload Release Asset
        if: matrix.os == 'ubuntu'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.result }}
          asset_path: ./target/x86_64-unknown-linux-musl/release/ya-relay-server
          asset_name: ya-relay-server
          asset_content_type: application/octet-stream

      - name: Upload Release Asset Windows
        if: matrix.os == 'windows'
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.result }}
          asset_path: ./target/release/ya-relay-server.exe
          asset_name: ya-relay-server.exe
          asset_content_type: application/octet-stream

  build-deb:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Get upload url
        id: release_upload_url
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            let tag = context.payload.ref.replace(/.*\//, '');
            let release =  await github.request("GET /repos/:owner/:repo/releases/tags/:tag", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            console.log(release.data.upload_url);
            return release.data.upload_url

      - name: Check out repository
        uses: actions/checkout@v2

      - name: Extract Version
        id: version
        shell: bash
        env:
          OS_NAME: ${{ matrix.os }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          TAGV_NAME="${TAG_NAME#pre-rel-}"
          VERSION=${TAGV_NAME#v}
          echo "::set-output name=tagv::${TAG_NAME}"
          echo "::set-output name=version::${VERSION}"

      - uses: golemfactory/build-deb-action@v4
        id: deb
        with:
          debVersion: ${{ steps.version.outputs.version }}
          pkgName: ya-relay-server
          subdir: server

      - name: Upload Release Deb
        id: upload-release-asset-prov
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.result }}
          asset_path: ${{ steps.deb.outputs.deb }}
          asset_name: ya_relay_server_${{ steps.version.outputs.tagv }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package
